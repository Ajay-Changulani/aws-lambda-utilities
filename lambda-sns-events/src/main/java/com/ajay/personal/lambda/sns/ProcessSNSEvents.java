package com.ajay.personal.lambda.sns;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.Pair;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.SNSEvent;
import com.amazonaws.services.lambda.runtime.events.SNSEvent.SNS;
import com.amazonaws.services.lambda.runtime.events.SNSEvent.SNSRecord;

/**
 * This lamdba handler processes SNSEvents generated by a S3 bucket.
 * 
 * The S3 bucket publishes events to SNS topic. The lamdba function subscribes
 * to the SNS topic for events. S3 -> SNS -> Lambda.
 * 
 * @author ajaychangulani
 *
 */
public class ProcessSNSEvents implements RequestHandler<SNSEvent, Context> {

	public Context handleRequest(SNSEvent input, Context context) {

		List<Pair<String, String>> list = parseSNSEvent(input);

		try {
			for (Pair<String, String> pair : list) {
				String s3Bucket = pair.getKey();
				String s3Key = pair.getValue();

				// Extract S3 data...
				// Transform as needed...
				// Load back to S3 or do something else...
			}
		} catch (Exception e) {
			throw new RuntimeException(e);
		}

		return context;
	}

	/**
	 * Parses SNSEvent and returns a list of pair of all the bucket-key that
	 * generated the event.
	 */
	public List<Pair<String, String>> parseSNSEvent(SNSEvent snsEvent) {
		List<Pair<String, String>> list = new ArrayList<Pair<String, String>>();

		for (SNSRecord record : snsEvent.getRecords()) {
			SNS sns = record.getSNS();
			try {
				JSONObject json = (JSONObject) new JSONParser().parse(sns.getMessage());
				JSONArray messageRecords = (JSONArray) json.get("Records");

				for (int i = 0; i < messageRecords.size(); i++) {
					JSONObject mr = (JSONObject) messageRecords.get(i);
					JSONObject mrS3 = (JSONObject) mr.get("s3");
					JSONObject mrS3Bucket = (JSONObject) mrS3.get("bucket");
					JSONObject mrS3Key = (JSONObject) mrS3.get("object");
					String bucket = (String) mrS3Bucket.get("name");
					String key = (String) mrS3Key.get("key");

					list.add(new ImmutablePair<String, String>(bucket, key));
				}
			} catch (ParseException e) {
				throw new RuntimeException(e);
			}
		}

		return list;
	}

}
